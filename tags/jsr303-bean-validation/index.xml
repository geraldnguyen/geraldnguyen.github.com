<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jsr303 Bean Validation on Gerald Nguyen</title>
    <link>https://geraldnguyen.github.io/tags/jsr303-bean-validation/</link>
    <description>Recent content in Jsr303 Bean Validation on Gerald Nguyen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Dec 2012 09:19:42 +0100</lastBuildDate>
    <atom:link href="https://geraldnguyen.github.io/tags/jsr303-bean-validation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JSR 303 – Bean Validation – Let Your Bean Validate Itself</title>
      <link>https://geraldnguyen.github.io/posts/2012/12/2012-12-20-jsr303-bean-validation-self-validating-bean/</link>
      <pubDate>Thu, 20 Dec 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/12/2012-12-20-jsr303-bean-validation-self-validating-bean/</guid>
      <description>This is a simple application of my previous post whereby you can develop your own validation rule and enforcer.&#xA;The significance of this application is the use of SelfValidate interface to enable bean to define its own validation method and validator to invoke bean’s method. Typically this constraint is apply to a type, but application on field is also possible.&#xA;Constraint Annotation @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Constraint(validatedBy=SelfValidator.class) public @interface SelfValidation { String message() default &amp;#34;Self-validation failed&amp;#34;; Class[] groups() default {}; Class&amp;lt;?</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Custom Constraints</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-25-jsr303-bean-validation-custom-constraints/</link>
      <pubDate>Sat, 25 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-25-jsr303-bean-validation-custom-constraints/</guid>
      <description>So far, we have learn the basic and a not-so-common nested usage of JSR 303 Bean Validation, it’s time to learn how the declarative validation rule was implemented. In another word, we will learn to create a custom constraint this this post.&#xA;Constraint Annotation Custom constraint is a special kind of annotation that is itself annotated with @javax.validation.Constraint annotation. For example:&#xA;@Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Constraint(validatedBy=CustomeValidator.class) public @interface CustomConstraint { String message() default &amp;#34;Custom validation failed&amp;#34;; Class[] groups() default {}; Class&amp;lt;?</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Nested Validation</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-09-jsr303-bean-validation-nested-validation/</link>
      <pubDate>Thu, 09 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-09-jsr303-bean-validation-nested-validation/</guid>
      <description>Following up from my previous post about JSR 303 – Bean Validation, we will see how to apply it to any nested property and how to display validation error on screen using Spring MVC’s JSP tags&#xA;1. Bean Validation on Nested Property Recall that to validate any property, we only need to put a Constraint annotation on top of its declaration. Example of common constraints are @NotEmpty, @Pattern, @Email. One thing in common of these constraints are that the applied property has to be of type String.</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Basic</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-03-jsr303-bean-validation-basic/</link>
      <pubDate>Fri, 03 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-03-jsr303-bean-validation-basic/</guid>
      <description>JSR 303 – Bean Validation is defines a metadata model and API for JavaBean validation. The metadata is primarily in Annotation forms, with the possibility of being overridden or extended by XML descriptors. Hibernate Validator is the reference implementation of JSR 303.&#xA;The current version, as of August 2nd, 2012, of JSR303 is 1.0, and of Hibernate Validator version is 4.0.1.&#xA;1. Example A straightforward use of Bean Validation is to document and specify validation rules on JavaBean’s properties.</description>
    </item>
  </channel>
</rss>
