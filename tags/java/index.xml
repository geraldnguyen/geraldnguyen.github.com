<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Gerald Nguyen</title>
    <link>https://geraldnguyen.github.io/tags/java/</link>
    <description>Recent content in Java on Gerald Nguyen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Feb 2023 08:00:00 -0700</lastBuildDate>
    <atom:link href="https://geraldnguyen.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Five Minimum Viable Interview Questions series — Updated 17 Feb 2023</title>
      <link>https://geraldnguyen.github.io/posts/2023/02/five-minimum-viable-interview-questions-series/</link>
      <pubDate>Fri, 17 Feb 2023 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/02/five-minimum-viable-interview-questions-series/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://miro.medium.com/v2/resize:fit:700/0*qxJpBdXPqAG2Z7NJ&#34;&#xA;    alt=&#34;Photo by Wes Hicks on Unsplash&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@sickhews?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Wes Hicks&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h1 id=&#34;rationale&#34;&gt;Rationale&lt;/h1&gt;&#xA;&lt;p&gt;Let’s face it. A developer is expected to know A LOT these days.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/02/five-minimum-viable-interview-questions-series/1_VoFu1hUShEKCl-14qtPoFQ.png&#34;&#xA;    alt=&#34;A typical job requirement (screenshot)&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;A typical job requirement (screenshot)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Five Minimum Viable Spring REST Interview Questions</title>
      <link>https://geraldnguyen.github.io/posts/2023/01/5-minimum-viable-spring-rest-interview-questions/</link>
      <pubDate>Thu, 12 Jan 2023 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/01/5-minimum-viable-spring-rest-interview-questions/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/01/5-minimum-viable-spring-rest-interview-questions/0_5kwKvgKkYWpxPDoz.webp&#34;&#xA;    alt=&#34;Photo by Christina @ wocintechchat.com on Unsplash&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@wocintechchat?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Christina @ wocintechchat.com&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;page-break&#34; role=&#34;separator&#34;&gt;&#xA;  &lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;&lt;em&gt;This is part of my&lt;/em&gt; &lt;a href=&#34;https://geraldnguyen.github.io/posts/2023/02/five-minimum-viable-interview-questions-series/&#34;&gt;&lt;em&gt;Five Minimum Viable Interview Questions series&lt;/em&gt;&lt;/a&gt; &lt;em&gt;where I research and compile Five essential interview questions on each interview topic. All of these questions aim to assess real and practical skills expected at work&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maven — 3 Free Resources for Beginner and Intermediate Java Developers</title>
      <link>https://geraldnguyen.github.io/posts/2023/01/maven-3-free-resources-for-beginner-and-intermediate-java-developers/</link>
      <pubDate>Sat, 07 Jan 2023 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/01/maven-3-free-resources-for-beginner-and-intermediate-java-developers/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/01/maven-3-free-resources-for-beginner-and-intermediate-java-developers/1_OP59b2RYiBgs_OK9PqAzMA.webp&#34;&#xA;    alt=&#34;Screenshot of a Maven POM file&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Screenshot of a Maven POM file&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Maven is the most popular build and dependency management system from the Apache Foundation.&lt;/p&gt;&#xA;&lt;p&gt;If you plan to develop serious applications in Java or if you have just started to, you have better pick up Maven. I have just the resources for you below to learn about it and move from Beginner to Intermediate in no time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Work-hard Verifying or Work-smart Mocking</title>
      <link>https://geraldnguyen.github.io/posts/2023/01/work-hard-verifying-or-work-smart-mocking/</link>
      <pubDate>Wed, 04 Jan 2023 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/01/work-hard-verifying-or-work-smart-mocking/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/01/work-hard-verifying-or-work-smart-mocking/0_huB0so5ACBot2PYg.webp&#34;&#xA;    alt=&#34;Photo by Tim Gouw on Unsplash&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@punttim?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Tim Gouw&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Let’s test this service&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Service&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;SampleService&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;final&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;SampleRepository&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sampleRepository;&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;SampleService&lt;/span&gt;(SampleRepository&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sampleRepository)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#008080&#34;&gt;sampleRepository&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sampleRepository;&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;SampleEntity&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;createSampleEntity&lt;/span&gt;()&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;SampleEntity&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sampleEntity&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;SampleEntity();&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;sampleEntity.&lt;span style=&#34;color:#008080&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;sample&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sampleRepository.&lt;span style=&#34;color:#008080&#34;&gt;save&lt;/span&gt;(sampleEntity);&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Retry WebClient Request</title>
      <link>https://geraldnguyen.github.io/posts/2022/12/retry-webclient-request/</link>
      <pubDate>Fri, 30 Dec 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/12/retry-webclient-request/</guid>
      <description>&lt;h1 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h1&gt;&#xA;&lt;p&gt;Sometimes web request fails, for whatever reason, and you need to retry it&lt;/p&gt;&#xA;&lt;p&gt;Let’s simulate a failed request scenario in a unit test. In the below code, the &lt;code&gt;webClient&lt;/code&gt; attempts to submit a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/employee/100&lt;/code&gt; (stored in constant &lt;code&gt;PATH&lt;/code&gt;). We mocked the backend server to fail with common status codes such as &lt;code&gt;BAD_REQUEST&lt;/code&gt;, &lt;code&gt;UNAUTHORIZED&lt;/code&gt; and validate that the client throws &lt;code&gt;WebClientResponseException&lt;/code&gt; upon receiving such statuses.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The best way to fix Hibernate’s MultipleBagFetchException</title>
      <link>https://geraldnguyen.github.io/posts/2022/12/fixing-hibernate-multiplebagfetchexception/</link>
      <pubDate>Sun, 04 Dec 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/12/fixing-hibernate-multiplebagfetchexception/</guid>
      <description>&lt;p&gt;There are 2 articles from &lt;a href=&#34;https://vladmihalcea.com/hibernate-multiplebagfetchexception/&#34;&gt;https://vladmihalcea.com&lt;/a&gt; describing his analysis and solutions to Hibernate’s MultipleBagFetchException. The &lt;a href=&#34;https://vladmihalcea.com/hibernate-multiplebagfetchexception/&#34;&gt;first&lt;/a&gt; one, appeared around 2020 (when I first researched this problem) or even earlier (2018?), offered an analysis of the problem and a solution using Hibernate’s EntityManager API. The &lt;a href=&#34;https://vladmihalcea.com/spring-data-jpa-multiplebagfetchexception/&#34;&gt;second&lt;/a&gt; one appeared around Jun 2022, and offers a slightly different solution for JPA.&lt;/p&gt;&#xA;&lt;p&gt;I will present below my understanding of his analysis, his solutions, and working sample codes which you can check out and validate your understanding and/or devise your own solutions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Echo API</title>
      <link>https://geraldnguyen.github.io/posts/2022/11/echo-api/</link>
      <pubDate>Wed, 30 Nov 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/11/echo-api/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;The need for this library arose when I wanted assurance that my &lt;a href=&#34;https://www.npmjs.com/package/ngx-correlation-id&#34;&gt;HTTP client&lt;/a&gt; was sending correctly formulated HTTP messages.&lt;/p&gt;&#xA;&lt;p&gt;Another use of this &lt;code&gt;/echo&lt;/code&gt; API is to capture and debug the remote calls from another service. Imagine you are providing a webhook endpoint. Before you even build one, you first need to know what incoming messages look like. Supplying an &lt;code&gt;/echo&lt;/code&gt; API endpoint in the webhook’s registration allows you to capture and log all incoming messages&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit testing Java’s try-with-resource</title>
      <link>https://geraldnguyen.github.io/posts/2022/11/unit-testing-java-try-with-resource/</link>
      <pubDate>Tue, 29 Nov 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/11/unit-testing-java-try-with-resource/</guid>
      <description>&lt;p&gt;Java’s try-with-resource is a convenient syntactic shortcut. It frees developers from keeping track of closeable resources and closing in a &lt;code&gt;finally&lt;/code&gt; block&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2022/11/unit-testing-java-try-with-resource/1_6jiM4RwfZ3NKj_hUuFw3aQ.png&#34;&#xA;    alt=&#34;Unit testing try-with-resource&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Unit testing try-with-resource&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;&#xA;&lt;p&gt;Some of us may remember doing such boring and lengthy &lt;code&gt;try&lt;/code&gt;-&lt;code&gt;finally&lt;/code&gt;-&lt;code&gt;if-not-null&lt;/code&gt;-&lt;code&gt;close()&lt;/code&gt; A LOT!&lt;/p&gt;&#xA;&lt;p&gt;On a typical day, we performed these steps a dozen times:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Method Reference</title>
      <link>https://geraldnguyen.github.io/posts/2022/11/java-method-reference/</link>
      <pubDate>Sun, 27 Nov 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/11/java-method-reference/</guid>
      <description>&lt;p&gt;I first learned method reference from C#, so the Java concept is familiar to me. Or that’s what I thought until I picked up the &lt;a href=&#34;https://www.oreilly.com/library/view/modern-java-recipes/9781491973165/&#34;&gt;Modern Java Recipes book&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In this article, we’ll explore 3 forms of method references in Java&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;object::instanceMethod&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Class::staticMethod&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;Class::instanceMethod&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The last one is a bit more special, as we shall examine in detail&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2022/11/java-method-reference/1_ypHleI7FEQsx3ZrsTQBvlQ.png&#34;&#xA;    alt=&#34;Source: author&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Source: author&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Stream Interview Tests - takeWhile</title>
      <link>https://geraldnguyen.github.io/posts/2021/11/java-stream-interview-tests-takewhile/</link>
      <pubDate>Mon, 01 Nov 2021 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2021/11/java-stream-interview-tests-takewhile/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2021/11/java-stream-interview-tests-takewhile/1_QnzX3SLxc1y3ALxkg6Rwyw.png&#34;&#xA;    alt=&#34;Generated by Dall-e&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Generated by &lt;a href=&#34;https://labs.openai.com/s/wxXrNGBn2waq9Un2LZxXNeGv&#34;&gt;Dall-e&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h1 id=&#34;why-java-stream&#34;&gt;Why Java Stream?&lt;/h1&gt;&#xA;&lt;p&gt;Since its introduction in Java 8, Stream has become more and more the preferred way of processing collection. But some of its APIs, are complicated and hard to understand, especially those of &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html&#34;&gt;Collector&lt;/a&gt; and those for &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#reduce-U-java.util.function.BiFunction-java.util.function.BinaryOperator-&#34;&gt;reduction&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Stream Interview Tests - Distinct Characters</title>
      <link>https://geraldnguyen.github.io/posts/2021/10/java-stream-interview-tests-distinct-characters/</link>
      <pubDate>Sat, 30 Oct 2021 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2021/10/java-stream-interview-tests-distinct-characters/</guid>
      <description>&lt;h1 id=&#34;requirement&#34;&gt;Requirement&lt;/h1&gt;&#xA;&lt;p&gt;Given a sentence comprising of one or multiple words separated by space (e.g. &lt;code&gt;java&lt;/code&gt;, &lt;code&gt;Hello World&lt;/code&gt;, &lt;code&gt;aadsbbaba&lt;/code&gt;), return a sorted list of distinct characters excluding space&lt;/p&gt;&#xA;&lt;p&gt;Solve this problem using Java Stream&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: Use &lt;code&gt;String.split(“”)&lt;/code&gt;to split a string into a &lt;code&gt;String[]&lt;/code&gt;, then use &lt;code&gt;String.charAt(0)&lt;/code&gt; to convert each single-char string to &lt;code&gt;char&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;discussion&#34;&gt;Discussion&lt;/h1&gt;&#xA;&lt;p&gt;This problem tests candidate’s knowledge of the following &lt;code&gt;Stream&lt;/code&gt; methods:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;Stream.of(...)&lt;/code&gt; or &lt;code&gt;Array.stream(...)&lt;/code&gt; to convert an array of single-char string (e.g. from &lt;code&gt;str.split(&amp;quot;&amp;quot;)&lt;/code&gt;) to &lt;code&gt;Stream&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;map(str -&amp;gt; str.charAt(0))&lt;/code&gt; to convert &lt;code&gt;String&lt;/code&gt; to &lt;code&gt;Character&lt;/code&gt;. &lt;strong&gt;Note&lt;/strong&gt;: while &lt;code&gt;String.toCharArray&lt;/code&gt; can readily convert a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;char[]&lt;/code&gt;, turning the resulting array to a &lt;code&gt;Character&lt;/code&gt; stream isn&amp;rsquo;t straightforward due to lack of built-in support for &lt;code&gt;char&lt;/code&gt; type in Stream and Collection API. The &lt;code&gt;Arrays.asList(str.toCharArray()&lt;/code&gt; or &lt;code&gt;List.of(...)&lt;/code&gt; results in a &lt;code&gt;List&amp;lt;char[]&amp;gt;&lt;/code&gt; instead&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;distinct()&lt;/code&gt; to keep only 1 instance of each encountered character&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;sorted()&lt;/code&gt; to sort the encountered characters in their natural order&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;collect(Collectors.toList())&lt;/code&gt; to collect stream elements into a list&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;sample-solution&#34;&gt;Sample Solution&lt;/h1&gt;&#xA;&lt;p&gt;A sample solution is shown below. In addition to above operations, we only utilize an extra &lt;code&gt;filter(...)&lt;/code&gt; operation to discard spaces from getting into our response&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spring REST API Interview Questions</title>
      <link>https://geraldnguyen.github.io/posts/2021/10/spring-rest-api-interview-questions/</link>
      <pubDate>Tue, 19 Oct 2021 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2021/10/spring-rest-api-interview-questions/</guid>
      <description>&lt;h2 id=&#34;1-complete-the-rest-controller&#34;&gt;#1 Complete the REST controller&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Objective&lt;/strong&gt;: Assess a candidate’s practical experience and knowledge&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Instructions&lt;/strong&gt;: Given the below controller, fill in Spring annotations according to instructions given in the code comments&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Pay attention to&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Did the candidate notice the repetition of &lt;code&gt;/friends&lt;/code&gt; prefix? Did he/she suggest a &lt;code&gt;@RequestMapping(/friends)&lt;/code&gt; on the controller class instead?&lt;/li&gt;&#xA;&lt;li&gt;How did he/she annotate the &lt;em&gt;optional&lt;/em&gt; parameter &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; in &lt;code&gt;findFriends(String name, Long id)&lt;/code&gt; method?&lt;/li&gt;&#xA;&lt;li&gt;What annotation can be used to force a 204 (no content) response?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/* Assume all package, imports and dependency classes are available */&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; * A rest controller for Friend-related operations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt; */&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;FriendController&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;final&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;FriendService&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendService;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;FriendController&lt;/span&gt;(FriendService&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendService)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#008080&#34;&gt;friendService&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendService;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * Response to GET /friends/ request&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @param name (optional) filter by name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @param id (optional) filter by id&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @return a list of friends&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     */&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;List&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;FriendDTO&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;findFriends&lt;/span&gt;(String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;name,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Long&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;id)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(id&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;null&lt;/span&gt;)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendService.&lt;span style=&#34;color:#008080&#34;&gt;findByFriendId&lt;/span&gt;(id);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;(StringUtils.&lt;span style=&#34;color:#008080&#34;&gt;hasText&lt;/span&gt;(name))&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendService.&lt;span style=&#34;color:#008080&#34;&gt;findByName&lt;/span&gt;(name);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendService.&lt;span style=&#34;color:#008080&#34;&gt;findAll&lt;/span&gt;();&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * Response to GET /friends/hello/{friend&amp;#39;s name} request&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @param friend a friend&amp;#39;s name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @return a friendly Hello&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     */&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;hello&lt;/span&gt;(String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friend)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String.&lt;span style=&#34;color:#008080&#34;&gt;format&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Hello %s&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friend);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * Response to POST /friends/hello/{friend&amp;#39;s name} request&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @param friend a friend&amp;#39;s name which is to be saved&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @return a friendly Hello together with Id of the new friend&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     */&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;helloAndSave&lt;/span&gt;(String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friend)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;FriendDTO&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;dto&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendService.&lt;span style=&#34;color:#008080&#34;&gt;add&lt;/span&gt;(FriendDTO.&lt;span style=&#34;color:#008080&#34;&gt;builder&lt;/span&gt;().&lt;span style=&#34;color:#008080&#34;&gt;name&lt;/span&gt;(friend).&lt;span style=&#34;color:#008080&#34;&gt;createDt&lt;/span&gt;(LocalDateTime.&lt;span style=&#34;color:#008080&#34;&gt;now&lt;/span&gt;()).&lt;span style=&#34;color:#008080&#34;&gt;build&lt;/span&gt;());&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String.&lt;span style=&#34;color:#008080&#34;&gt;format&lt;/span&gt;(&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;%s. Your Id is %d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;hello(friend),&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;dto.&lt;span style=&#34;color:#008080&#34;&gt;getId&lt;/span&gt;());&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * Un-friend&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * Response to DELETE /friends/{friend&amp;#39;s id} request, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * return 204 if successful&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @param friendId the id of the friend&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     */&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;deleteFriend&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendId)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;friendService.&lt;span style=&#34;color:#008080&#34;&gt;removeFriend&lt;/span&gt;(friendId);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * Update friend name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * Response to &amp;lt;METHOD?&amp;gt; /friends/{friend&amp;#39;s id}/{new name} request, &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * return update friend info&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @param friendId the id of the friend&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @param newName the new name of the friend&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     * @return updated friend&amp;#39;s info&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;     */&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;FriendDTO&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;updateFriend&lt;/span&gt;(&lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendId,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;String&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;newName)&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;friendService.&lt;span style=&#34;color:#008080&#34;&gt;updateName&lt;/span&gt;(friendId,&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;newName);&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#bbb&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>javax.transaction.Transactional vs org.springframework.transaction.annotation.Transactional</title>
      <link>https://geraldnguyen.github.io/posts/2020/09/2020-09-10-transactional-annotation/</link>
      <pubDate>Thu, 10 Sep 2020 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2020/09/2020-09-10-transactional-annotation/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;If you’re using Spring or Spring Boot, then use the Spring @Transactional annotation, as it allows you to configure more attributes than the Java EE @Transactional annotation.&lt;/p&gt;&#xA;&lt;p&gt;If you are using Java EE alone, and you deploy your application on a Java EE application server, then use the Java EE @Transactional annotation.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/62702146/575457&#34;&gt;https://stackoverflow.com/a/62702146/575457&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>What Happened When You Assigned State to a Stateless Session Bean?</title>
      <link>https://geraldnguyen.github.io/posts/2013/09/2013-09-10-what-happened-when-assign-state-to-stateless-session-bean/</link>
      <pubDate>Tue, 10 Sep 2013 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2013/09/2013-09-10-what-happened-when-assign-state-to-stateless-session-bean/</guid>
      <description>&lt;p&gt;Here’s a scenario that illustrate above possibility&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    T1                   |     T2&#xA;1) setupState [A]        |                   &amp;lt;- store state as a variable&#xA;                         |                      in bean instance [A]&#xA;                         | 2) setupState [A] &amp;lt;- [A] is free, so the container&#xA;                         |                      allocate it to serve T2 request&#xA;                         |&#xA;3) someLongRunMethod [A] | 3&amp;#39;) aMethod [B]   &amp;lt;- Because A is busy with T1, &#xA;                                                another instance (B) is created &#xA;                                                to serve T2 request. If aMethod &#xA;                                                depends on previously setup state&#xA;                                                it will encounter error&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Let Your Bean Validate Itself</title>
      <link>https://geraldnguyen.github.io/posts/2012/12/2012-12-20-jsr303-bean-validation-self-validating-bean/</link>
      <pubDate>Thu, 20 Dec 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/12/2012-12-20-jsr303-bean-validation-self-validating-bean/</guid>
      <description>&lt;p&gt;This is a simple application of my &lt;a href=&#34;https://geraldnguyen.github.io/posts/2012/08/2012-08-25-jsr303-bean-validation-custom-constraints/&#34;&gt;previous post&lt;/a&gt; whereby you can develop your own validation rule and enforcer.&lt;/p&gt;&#xA;&lt;p&gt;The significance of this application is the use of &lt;code&gt;SelfValidate&lt;/code&gt; interface to enable bean to define its own validation method and validator to invoke bean’s method. Typically this constraint is apply to a type, but application on field is also possible.&lt;/p&gt;&#xA;&lt;h2 id=&#34;constraint-annotation&#34;&gt;Constraint Annotation&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Target({ElementType.TYPE})&#xA;@Retention(RetentionPolicy.RUNTIME)&#xA;@Constraint(validatedBy=SelfValidator.class)&#xA; &#xA;public @interface SelfValidation {&#xA;   String message() default &amp;#34;Self-validation failed&amp;#34;;&#xA;   Class[] groups() default {};&#xA;   Class&amp;lt;? extends Payload&amp;gt;[] payload() default {};&#xA;}&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>JDBC Transaction Without EJB</title>
      <link>https://geraldnguyen.github.io/posts/2012/10/2012-10-24-jdbc-transaction-without-ejb/</link>
      <pubDate>Wed, 24 Oct 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/10/2012-10-24-jdbc-transaction-without-ejb/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;Create a DAO method in which you set JDBC connection’s auto-commit property to false&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dbConn.setAutoCommit(false);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;Execute all your queries&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stmt = dbConn.createStatement();&#xA;&#xA;result = stmt.executeQuery(query);&#xA;&#xA;stmt.executeUpdate(update);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;Commit or rollback the transaction&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dbConn.commit();&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;Reset auto-commit to true again for other execution&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;dbConn.setAutoCommit(true);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is really simple, as it should be for something purely mechanical. The challenge for every programmer is how to write your transaction code or order your queries such that you can achieve desired result.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Custom Constraints</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-25-jsr303-bean-validation-custom-constraints/</link>
      <pubDate>Sat, 25 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-25-jsr303-bean-validation-custom-constraints/</guid>
      <description>&lt;p&gt;So far, we have learn the &lt;a href=&#34;https://geraldnguyen.github.io/posts/2012/08/2012-08-03-jsr303-bean-validation-basic/&#34;&gt;basic&lt;/a&gt; and a not-so-common &lt;a href=&#34;https://geraldnguyen.github.io/posts/2012/08/2012-08-09-jsr303-bean-validation-nested-validation/&#34;&gt;nested usage&lt;/a&gt; of JSR 303 Bean Validation, it’s time to learn how the declarative validation rule was implemented. In another word, we will learn to create a custom constraint this this post.&lt;/p&gt;&#xA;&lt;h2 id=&#34;constraint-annotation&#34;&gt;Constraint Annotation&lt;/h2&gt;&#xA;&lt;p&gt;Custom constraint is a special kind of annotation that is itself annotated with &lt;code&gt;@javax.validation.Constraint&lt;/code&gt; annotation. For example:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Target({ElementType.FIELD})&#xA;@Retention(RetentionPolicy.RUNTIME)&#xA;@Constraint(validatedBy=CustomeValidator.class) &#xA;public @interface CustomConstraint {&#xA;   String message() default &amp;#34;Custom validation failed&amp;#34;;&#xA;   Class[] groups() default {};&#xA;   Class&amp;lt;? extends Payload&amp;gt;[] payload() default {};&#xA;}&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Nested Validation</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-09-jsr303-bean-validation-nested-validation/</link>
      <pubDate>Thu, 09 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-09-jsr303-bean-validation-nested-validation/</guid>
      <description>&lt;p&gt;Following up from my &lt;a href=&#34;https://geraldnguyen.github.io/posts/2012/08/2012-08-03-jsr303-bean-validation-basic/&#34;&gt;previous post&lt;/a&gt; about JSR 303 – Bean Validation, we will see how to apply it to any nested property and how to display validation error on screen using Spring MVC’s JSP tags&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-bean-validation-on-nested-property&#34;&gt;1. Bean Validation on Nested Property&lt;/h2&gt;&#xA;&lt;p&gt;Recall that to validate any property, we only need to put a &lt;em&gt;Constraint&lt;/em&gt; annotation on top of its declaration. Example of common constraints are &lt;code&gt;@NotEmpty&lt;/code&gt;, &lt;code&gt;@Pattern&lt;/code&gt;, &lt;code&gt;@Email&lt;/code&gt;. One thing in common of these constraints are that the applied property has to be of type &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Basic</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-03-jsr303-bean-validation-basic/</link>
      <pubDate>Fri, 03 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-03-jsr303-bean-validation-basic/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://jcp.org/en/jsr/detail?id=303&#34;&gt;JSR 303 – Bean Validation&lt;/a&gt; is defines a metadata model and API for JavaBean validation. The metadata is primarily in Annotation forms, with the possibility of being overridden or extended by XML descriptors. &lt;a href=&#34;http://www.hibernate.org/subprojects/validator.html&#34;&gt;Hibernate Validator&lt;/a&gt; is the reference implementation of JSR 303.&lt;/p&gt;&#xA;&lt;p&gt;The current version, as of August 2nd, 2012, of JSR303 is 1.0, and of  Hibernate Validator version is 4.0.1.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-example&#34;&gt;1. Example&lt;/h2&gt;&#xA;&lt;p&gt;A straightforward use of Bean Validation is to document and specify validation rules on JavaBean’s properties. In the below example, it is easy to deduce that field &lt;em&gt;manufacturer&lt;/em&gt;, &lt;em&gt;licensePlate&lt;/em&gt; and &lt;em&gt;seatCount&lt;/em&gt; are mandatory while &lt;em&gt;note&lt;/em&gt; is not. In addition, &lt;em&gt;licencePlate&lt;/em&gt; must contain at least 2 and at most 14 characters; &lt;em&gt;seatCount&lt;/em&gt; must be equal or higher than 2.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SPRING MVC – SESSIONATTRIBUTES ANNOTATION</title>
      <link>https://geraldnguyen.github.io/posts/2012/06/2012-06-30-spring-mvc-sessionattributes-annotation/</link>
      <pubDate>Sat, 30 Jun 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/06/2012-06-30-spring-mvc-sessionattributes-annotation/</guid>
      <description>&lt;p&gt;Spring MVC’s &lt;a href=&#34;http://static.springsource.org/spring/docs/3.1.x/javadoc-api/org/springframework/web/bind/annotation/SessionAttributes.html&#34;&gt;SessionAttributes&lt;/a&gt; has 2 parameters: &lt;strong&gt;values&lt;/strong&gt; (storing attributes’ names) and &lt;strong&gt;types&lt;/strong&gt; (storing attributes’ types).&lt;/p&gt;&#xA;&lt;p&gt;It’s pretty straightforward for &lt;strong&gt;values&lt;/strong&gt;. You specify the name of your attribute and it is &lt;em&gt;remembered&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;It’s trickier for &lt;strong&gt;types&lt;/strong&gt;. For example:&lt;/p&gt;&#xA;&lt;p&gt;– &lt;code&gt;@SessionAttributes (types= java.util.List.class)&lt;/code&gt; does not work!&lt;/p&gt;&#xA;&lt;p&gt;– But &lt;code&gt;@SessionAttributes (types= java.util.ArrayList.class)&lt;/code&gt; works (but not always)&lt;/p&gt;&#xA;&lt;p&gt;The reason behind this peculiar behaviour is that Spring does exact matching of attribute’s type versus declared type, instead of assessing attribute object’s &lt;strong&gt;Is-A&lt;/strong&gt; relationship.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java XML Parse error: Tried all: &#39;1&#39; addresses, but could not connect over HTTP to server</title>
      <link>https://geraldnguyen.github.io/posts/2012/03/2012-03-09-java-xml-parse-error/</link>
      <pubDate>Fri, 09 Mar 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/03/2012-03-09-java-xml-parse-error/</guid>
      <description>&lt;p&gt;I had a &lt;a href=&#34;https://geraldnguyen.github.io/posts/2010/10/2010-10-26-weblogic-saxparserfactory-issue/&#34;&gt;previous problem with Tiles and XML&lt;/a&gt;  (and common-digester). I resolved it by telling WLS to use a different &lt;code&gt;SAXParserFactory&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;But when my &lt;code&gt;SAXParserFactory&lt;/code&gt; was correct and I still encountered XML parsing error for the sample code from Tiles&amp;rsquo;s website, it is really puzzling.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.net.ConnectException: Tried all: &amp;#39;1&amp;#39; addresses, but could not connect over HTTP to server: &amp;#39;tiles.apache.org&amp;#39;, port: &amp;#39;80&amp;#39;        at weblogic.net.http.HttpClient.openServer(HttpClient.java:312)  ...        at org.apache.commons.digester.Digester.createInputSourceFromURL(Digester.java:2072)        at org.apache.commons.digester.Digester.resolveEntity(Digester.java:1725)        at com.sun.org.apache.xerces.internal.util.EntityResolverWrapper.resolveEntity(EntityResolverWrapper.java:107)        at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.resolveEntityAsPerStax(XMLEntityManager.java:1018)        ..        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:107)  ...        at org.apache.commons.digester.Digester.parse(Digester.java:1887)        at org.apache.tiles.definition.digester.DigesterDefinitionsReader.read(DigesterDefinitionsReader.java:267)&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Quicksort vs Merge sort in Java</title>
      <link>https://geraldnguyen.github.io/posts/2010/12/2010-12-12-quicksort-mergesort-java/</link>
      <pubDate>Sun, 12 Dec 2010 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2010/12/2010-12-12-quicksort-mergesort-java/</guid>
      <description>&lt;p&gt;The title is a little larger that what I have in this entry :D&lt;/p&gt;&#xA;&lt;p&gt;If you want the answer fast, go here &lt;a href=&#34;http://www.coderanch.com/t/520171/java/java/Why-Collections-sort-merge-sort#2355668&#34;&gt;http://www.coderanch.com/t/520171/java/java/Why-Collections-sort-merge-sort#2355668&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;And here is a longer write-up:&lt;/p&gt;&#xA;&lt;p&gt;I participated in an thread in Javaranche regarding why Arrays uses quicksort and Collections use merge sort (&lt;a href=&#34;http://www.coderanch.com/t/520171/java/java/Why-Collections-sort-merge-sort)&#34;&gt;http://www.coderanch.com/t/520171/java/java/Why-Collections-sort-merge-sort)&lt;/a&gt;. The thread starter claimed that quicksort is the best sort algorithm, for which I disagreed. I also replied with a link to wikipedia about merge sort performs better when the underlying datatype does not support random access (as does array). I thought that was the reason why Collections use merge sort: because a collection type such as LinkedList does not necessarily support random access.&lt;/p&gt;</description>
    </item>
    <item>
      <title>J2EE Programming Tips</title>
      <link>https://geraldnguyen.github.io/posts/2009/05/2009-05-04-j2ee-tips/</link>
      <pubDate>Mon, 04 May 2009 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2009/05/2009-05-04-j2ee-tips/</guid>
      <description>&lt;h1 id=&#34;j2ee-programming&#34;&gt;J2EE Programming&lt;/h1&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Learn to program Java well. SCJP is nice to have.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Do program with performance-awareness.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Always try to optimize your program; performance is a big concern in any J2EE application.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Dont just follow what other people call best practices, they may not fit your need while being costly to implement.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;J2EE application&amp;rsquo;s performance is often constraint by its interraction with database(s). Optimise your database access, data transaction management codes.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
