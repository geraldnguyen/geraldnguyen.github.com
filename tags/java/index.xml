<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Gerald Nguyen</title>
    <link>https://geraldnguyen.github.io/tags/java/</link>
    <description>Recent content in Java on Gerald Nguyen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 17 Feb 2023 08:00:00 -0700</lastBuildDate>
    <atom:link href="https://geraldnguyen.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Five Minimum Viable Interview Questions series — Updated 17 Feb 2023</title>
      <link>https://geraldnguyen.github.io/posts/2023/02/five-minimum-viable-interview-questions-series/</link>
      <pubDate>Fri, 17 Feb 2023 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/02/five-minimum-viable-interview-questions-series/</guid>
      <description>Photo by Wes Hicks on Unsplash&#xA;Rationale Let’s face it. A developer is expected to know A LOT these days.&#xA;A typical job requirement (screenshot)&#xA;And that makes interviewing a candidate hard because there is never enough time to ask all the necessary questions.&#xA;On the other hand, that also makes preparing for an interview hard because there are too many areas and details to prepare for.&#xA;These are in fact the very challenges I faced every time I apply for a new job, or interview to hire a new team member.</description>
    </item>
    <item>
      <title>Five Minimum Viable Spring REST Interview Questions</title>
      <link>https://geraldnguyen.github.io/posts/2023/01/5-minimum-viable-spring-rest-interview-questions/</link>
      <pubDate>Thu, 12 Jan 2023 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/01/5-minimum-viable-spring-rest-interview-questions/</guid>
      <description>Photo by Christina @ wocintechchat.com on Unsplash&#xA;This is part of my Five Minimum Viable Interview Questions series where I research and compile Five essential interview questions on each interview topic. All of these questions aim to assess real and practical skills expected at work&#xA;#1 — What is REST API? This question assesses the breadth and depth of a candidate’s understanding of REST API concepts.&#xA;Though this seems basic, it has caught many candidates off-guard because they never prepare for it.</description>
    </item>
    <item>
      <title>Maven — 3 Free Resources for Beginner and Intermediate Java Developers</title>
      <link>https://geraldnguyen.github.io/posts/2023/01/maven-3-free-resources-for-beginner-and-intermediate-java-developers/</link>
      <pubDate>Sat, 07 Jan 2023 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/01/maven-3-free-resources-for-beginner-and-intermediate-java-developers/</guid>
      <description>Screenshot of a Maven POM file&#xA;Maven is the most popular build and dependency management system from the Apache Foundation.&#xA;If you plan to develop serious applications in Java or if you have just started to, you have better pick up Maven. I have just the resources for you below to learn about it and move from Beginner to Intermediate in no time.&#xA;Beginner tutorial I often recommend Baeldung.com to my friends for beginner-level tutorials.</description>
    </item>
    <item>
      <title>Work-hard Verifying or Work-smart Mocking</title>
      <link>https://geraldnguyen.github.io/posts/2023/01/work-hard-verifying-or-work-smart-mocking/</link>
      <pubDate>Wed, 04 Jan 2023 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/01/work-hard-verifying-or-work-smart-mocking/</guid>
      <description>Photo by Tim Gouw on Unsplash&#xA;Let’s test this service&#xA;@Service public class SampleService { private final SampleRepository sampleRepository; public SampleService(SampleRepository sampleRepository) { this.sampleRepository = sampleRepository; } public SampleEntity createSampleEntity() { SampleEntity sampleEntity \= new SampleEntity(); sampleEntity.setName(&amp;#34;sample&amp;#34;); return sampleRepository.save(sampleEntity); } } If we want to test the method createSampleEntity from SampleService, there are 3 things we want to verify:&#xA;#1 — sampleRepository.save is called, #2 — with the right sampleEntity, and #3 — the resulting entity is returned Work hard Verifying A typical unit test contains 3 stages: Arrange, Act, and Assert (or AAA)</description>
    </item>
    <item>
      <title>Retry WebClient Request</title>
      <link>https://geraldnguyen.github.io/posts/2022/12/retry-webclient-request/</link>
      <pubDate>Fri, 30 Dec 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/12/retry-webclient-request/</guid>
      <description>Problem Statement Sometimes web request fails, for whatever reason, and you need to retry it&#xA;Let’s simulate a failed request scenario in a unit test. In the below code, the webClient attempts to submit a GET request to /employee/100 (stored in constant PATH). We mocked the backend server to fail with common status codes such as BAD_REQUEST, UNAUTHORIZED and validate that the client throws WebClientResponseException upon receiving such statuses.&#xA;@ParameterizedTest @EnumSource(value = HttpStatus.</description>
    </item>
    <item>
      <title>The best way to fix Hibernate’s MultipleBagFetchException</title>
      <link>https://geraldnguyen.github.io/posts/2022/12/fixing-hibernate-multiplebagfetchexception/</link>
      <pubDate>Sun, 04 Dec 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/12/fixing-hibernate-multiplebagfetchexception/</guid>
      <description>There are 2 articles from https://vladmihalcea.com describing his analysis and solutions to Hibernate’s MultipleBagFetchException. The first one, appeared around 2020 (when I first researched this problem) or even earlier (2018?), offered an analysis of the problem and a solution using Hibernate’s EntityManager API. The second one appeared around Jun 2022, and offers a slightly different solution for JPA.&#xA;I will present below my understanding of his analysis, his solutions, and working sample codes which you can check out and validate your understanding and/or devise your own solutions.</description>
    </item>
    <item>
      <title>Echo API</title>
      <link>https://geraldnguyen.github.io/posts/2022/11/echo-api/</link>
      <pubDate>Wed, 30 Nov 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/11/echo-api/</guid>
      <description>Introduction The need for this library arose when I wanted assurance that my HTTP client was sending correctly formulated HTTP messages.&#xA;Another use of this /echo API is to capture and debug the remote calls from another service. Imagine you are providing a webhook endpoint. Before you even build one, you first need to know what incoming messages look like. Supplying an /echo API endpoint in the webhook’s registration allows you to capture and log all incoming messages</description>
    </item>
    <item>
      <title>Unit testing Java’s try-with-resource</title>
      <link>https://geraldnguyen.github.io/posts/2022/11/unit-testing-java-try-with-resource/</link>
      <pubDate>Tue, 29 Nov 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/11/unit-testing-java-try-with-resource/</guid>
      <description>Java’s try-with-resource is a convenient syntactic shortcut. It frees developers from keeping track of closeable resources and closing in a finally block&#xA;Unit testing try-with-resource&#xA;Overview Some of us may remember doing such boring and lengthy try-finally-if-not-null-close() A LOT!&#xA;On a typical day, we performed these steps a dozen times:&#xA;Obtained a DB connection, and execute a query within the try {...} And then, to avoid connection leak, we must close the statement and DB connection within the finally {.</description>
    </item>
    <item>
      <title>Java Method Reference</title>
      <link>https://geraldnguyen.github.io/posts/2022/11/java-method-reference/</link>
      <pubDate>Sun, 27 Nov 2022 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/11/java-method-reference/</guid>
      <description>I first learned method reference from C#, so the Java concept is familiar to me. Or that’s what I thought until I picked up the Modern Java Recipes book.&#xA;In this article, we’ll explore 3 forms of method references in Java&#xA;object::instanceMethod Class::staticMethod Class::instanceMethod The last one is a bit more special, as we shall examine in detail&#xA;Source: author&#xA;object::instanceMethod The object::instanceMethod will invoke the referenced method on the said object with compatible arguments.</description>
    </item>
    <item>
      <title>Java Stream Interview Tests - takeWhile</title>
      <link>https://geraldnguyen.github.io/posts/2021/11/java-stream-interview-tests-takewhile/</link>
      <pubDate>Mon, 01 Nov 2021 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2021/11/java-stream-interview-tests-takewhile/</guid>
      <description>Generated by Dall-e&#xA;Why Java Stream? Since its introduction in Java 8, Stream has become more and more the preferred way of processing collection. But some of its APIs, are complicated and hard to understand, especially those of Collector and those for reduction.&#xA;I dare say that even experienced Java Stream users may still find them intimidating. Despite using it for several years and having prior experience with Stream-like operations in other programming languages, I still occasionally find some Stream-related tasks challenging.</description>
    </item>
    <item>
      <title>Java Stream Interview Tests - Distinct Characters</title>
      <link>https://geraldnguyen.github.io/posts/2021/10/java-stream-interview-tests-distinct-characters/</link>
      <pubDate>Sat, 30 Oct 2021 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2021/10/java-stream-interview-tests-distinct-characters/</guid>
      <description>Requirement Given a sentence comprising of one or multiple words separated by space (e.g. java, Hello World, aadsbbaba), return a sorted list of distinct characters excluding space&#xA;Solve this problem using Java Stream&#xA;Hint: Use String.split(“”)to split a string into a String[], then use String.charAt(0) to convert each single-char string to char&#xA;Discussion This problem tests candidate’s knowledge of the following Stream methods:&#xA;Stream.of(...) or Array.stream(...) to convert an array of single-char string (e.</description>
    </item>
    <item>
      <title>Spring REST API Interview Questions</title>
      <link>https://geraldnguyen.github.io/posts/2021/10/spring-rest-api-interview-questions/</link>
      <pubDate>Tue, 19 Oct 2021 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2021/10/spring-rest-api-interview-questions/</guid>
      <description>#1 Complete the REST controller Objective: Assess a candidate’s practical experience and knowledge&#xA;Instructions: Given the below controller, fill in Spring annotations according to instructions given in the code comments&#xA;Pay attention to:&#xA;Did the candidate notice the repetition of /friends prefix? Did he/she suggest a @RequestMapping(/friends) on the controller class instead? How did he/she annotate the optional parameter name and id in findFriends(String name, Long id) method? What annotation can be used to force a 204 (no content) response?</description>
    </item>
    <item>
      <title>javax.transaction.Transactional vs org.springframework.transaction.annotation.Transactional</title>
      <link>https://geraldnguyen.github.io/posts/2020/09/2020-09-10-transactional-annotation/</link>
      <pubDate>Thu, 10 Sep 2020 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2020/09/2020-09-10-transactional-annotation/</guid>
      <description>If you’re using Spring or Spring Boot, then use the Spring @Transactional annotation, as it allows you to configure more attributes than the Java EE @Transactional annotation.&#xA;If you are using Java EE alone, and you deploy your application on a Java EE application server, then use the Java EE @Transactional annotation.&#xA;https://stackoverflow.com/a/62702146/575457</description>
    </item>
    <item>
      <title>What Happened When You Assigned State to a Stateless Session Bean?</title>
      <link>https://geraldnguyen.github.io/posts/2013/09/2013-09-10-what-happened-when-assign-state-to-stateless-session-bean/</link>
      <pubDate>Tue, 10 Sep 2013 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2013/09/2013-09-10-what-happened-when-assign-state-to-stateless-session-bean/</guid>
      <description>Here’s a scenario that illustrate above possibility&#xA;T1 | T2 1) setupState [A] | &amp;lt;- store state as a variable | in bean instance [A] | 2) setupState [A] &amp;lt;- [A] is free, so the container | allocate it to serve T2 request | 3) someLongRunMethod [A] | 3&amp;#39;) aMethod [B] &amp;lt;- Because A is busy with T1, another instance (B) is created to serve T2 request. If aMethod depends on previously setup state it will encounter error </description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Let Your Bean Validate Itself</title>
      <link>https://geraldnguyen.github.io/posts/2012/12/2012-12-20-jsr303-bean-validation-self-validating-bean/</link>
      <pubDate>Thu, 20 Dec 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/12/2012-12-20-jsr303-bean-validation-self-validating-bean/</guid>
      <description>This is a simple application of my previous post whereby you can develop your own validation rule and enforcer.&#xA;The significance of this application is the use of SelfValidate interface to enable bean to define its own validation method and validator to invoke bean’s method. Typically this constraint is apply to a type, but application on field is also possible.&#xA;Constraint Annotation @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Constraint(validatedBy=SelfValidator.class) public @interface SelfValidation { String message() default &amp;#34;Self-validation failed&amp;#34;; Class[] groups() default {}; Class&amp;lt;?</description>
    </item>
    <item>
      <title>JDBC Transaction Without EJB</title>
      <link>https://geraldnguyen.github.io/posts/2012/10/2012-10-24-jdbc-transaction-without-ejb/</link>
      <pubDate>Wed, 24 Oct 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/10/2012-10-24-jdbc-transaction-without-ejb/</guid>
      <description>Create a DAO method in which you set JDBC connection’s auto-commit property to false dbConn.setAutoCommit(false); Execute all your queries stmt = dbConn.createStatement(); result = stmt.executeQuery(query); stmt.executeUpdate(update); Commit or rollback the transaction dbConn.commit(); Reset auto-commit to true again for other execution dbConn.setAutoCommit(true); This is really simple, as it should be for something purely mechanical. The challenge for every programmer is how to write your transaction code or order your queries such that you can achieve desired result.</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Custom Constraints</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-25-jsr303-bean-validation-custom-constraints/</link>
      <pubDate>Sat, 25 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-25-jsr303-bean-validation-custom-constraints/</guid>
      <description>So far, we have learn the basic and a not-so-common nested usage of JSR 303 Bean Validation, it’s time to learn how the declarative validation rule was implemented. In another word, we will learn to create a custom constraint this this post.&#xA;Constraint Annotation Custom constraint is a special kind of annotation that is itself annotated with @javax.validation.Constraint annotation. For example:&#xA;@Target({ElementType.FIELD}) @Retention(RetentionPolicy.RUNTIME) @Constraint(validatedBy=CustomeValidator.class) public @interface CustomConstraint { String message() default &amp;#34;Custom validation failed&amp;#34;; Class[] groups() default {}; Class&amp;lt;?</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Nested Validation</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-09-jsr303-bean-validation-nested-validation/</link>
      <pubDate>Thu, 09 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-09-jsr303-bean-validation-nested-validation/</guid>
      <description>Following up from my previous post about JSR 303 – Bean Validation, we will see how to apply it to any nested property and how to display validation error on screen using Spring MVC’s JSP tags&#xA;1. Bean Validation on Nested Property Recall that to validate any property, we only need to put a Constraint annotation on top of its declaration. Example of common constraints are @NotEmpty, @Pattern, @Email. One thing in common of these constraints are that the applied property has to be of type String.</description>
    </item>
    <item>
      <title>JSR 303 – Bean Validation – Basic</title>
      <link>https://geraldnguyen.github.io/posts/2012/08/2012-08-03-jsr303-bean-validation-basic/</link>
      <pubDate>Fri, 03 Aug 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/08/2012-08-03-jsr303-bean-validation-basic/</guid>
      <description>JSR 303 – Bean Validation is defines a metadata model and API for JavaBean validation. The metadata is primarily in Annotation forms, with the possibility of being overridden or extended by XML descriptors. Hibernate Validator is the reference implementation of JSR 303.&#xA;The current version, as of August 2nd, 2012, of JSR303 is 1.0, and of Hibernate Validator version is 4.0.1.&#xA;1. Example A straightforward use of Bean Validation is to document and specify validation rules on JavaBean’s properties.</description>
    </item>
    <item>
      <title>SPRING MVC – SESSIONATTRIBUTES ANNOTATION</title>
      <link>https://geraldnguyen.github.io/posts/2012/06/2012-06-30-spring-mvc-sessionattributes-annotation/</link>
      <pubDate>Sat, 30 Jun 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/06/2012-06-30-spring-mvc-sessionattributes-annotation/</guid>
      <description>Spring MVC’s SessionAttributes has 2 parameters: values (storing attributes’ names) and types (storing attributes’ types).&#xA;It’s pretty straightforward for values. You specify the name of your attribute and it is remembered.&#xA;It’s trickier for types. For example:&#xA;– @SessionAttributes (types= java.util.List.class) does not work!&#xA;– But @SessionAttributes (types= java.util.ArrayList.class) works (but not always)&#xA;The reason behind this peculiar behaviour is that Spring does exact matching of attribute’s type versus declared type, instead of assessing attribute object’s Is-A relationship.</description>
    </item>
    <item>
      <title>Java XML Parse error: Tried all: &#39;1&#39; addresses, but could not connect over HTTP to server</title>
      <link>https://geraldnguyen.github.io/posts/2012/03/2012-03-09-java-xml-parse-error/</link>
      <pubDate>Fri, 09 Mar 2012 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2012/03/2012-03-09-java-xml-parse-error/</guid>
      <description>I had a previous problem with Tiles and XML (and common-digester). I resolved it by telling WLS to use a different SAXParserFactory.&#xA;But when my SAXParserFactory was correct and I still encountered XML parsing error for the sample code from Tiles&amp;rsquo;s website, it is really puzzling.&#xA;java.net.ConnectException: Tried all: &amp;#39;1&amp;#39; addresses, but could not connect over HTTP to server: &amp;#39;tiles.apache.org&amp;#39;, port: &amp;#39;80&amp;#39; at weblogic.net.http.HttpClient.openServer(HttpClient.java:312) ... at org.apache.commons.digester.Digester.createInputSourceFromURL(Digester.java:2072) at org.apache.commons.digester.Digester.resolveEntity(Digester.java:1725) at com.</description>
    </item>
    <item>
      <title>Quicksort vs Merge sort in Java</title>
      <link>https://geraldnguyen.github.io/posts/2010/12/2010-12-12-quicksort-mergesort-java/</link>
      <pubDate>Sun, 12 Dec 2010 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2010/12/2010-12-12-quicksort-mergesort-java/</guid>
      <description>The title is a little larger that what I have in this entry :D&#xA;If you want the answer fast, go here http://www.coderanch.com/t/520171/java/java/Why-Collections-sort-merge-sort#2355668&#xA;And here is a longer write-up:&#xA;I participated in an thread in Javaranche regarding why Arrays uses quicksort and Collections use merge sort (http://www.coderanch.com/t/520171/java/java/Why-Collections-sort-merge-sort). The thread starter claimed that quicksort is the best sort algorithm, for which I disagreed. I also replied with a link to wikipedia about merge sort performs better when the underlying datatype does not support random access (as does array).</description>
    </item>
    <item>
      <title>J2EE Programming Tips</title>
      <link>https://geraldnguyen.github.io/posts/2009/05/2009-05-04-j2ee-tips/</link>
      <pubDate>Mon, 04 May 2009 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2009/05/2009-05-04-j2ee-tips/</guid>
      <description>J2EE Programming Learn to program Java well. SCJP is nice to have.&#xA;Do program with performance-awareness.&#xA;Always try to optimize your program; performance is a big concern in any J2EE application.&#xA;Dont just follow what other people call best practices, they may not fit your need while being costly to implement.&#xA;J2EE application&amp;rsquo;s performance is often constraint by its interraction with database(s). Optimise your database access, data transaction management codes.</description>
    </item>
  </channel>
</rss>
