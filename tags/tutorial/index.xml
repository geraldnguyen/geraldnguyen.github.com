<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Gerald Nguyen</title>
    <link>https://geraldnguyen.github.io/tags/tutorial/</link>
    <description>Recent content in Tutorial on Gerald Nguyen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 May 2024 08:00:00 -0700</lastBuildDate>
    <atom:link href="https://geraldnguyen.github.io/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Behavior Driven Development (BDD) with Selenium in Python</title>
      <link>https://geraldnguyen.github.io/posts/2024/05/behavior-driven-development-bdd-with-selenium-in-python/</link>
      <pubDate>Mon, 20 May 2024 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2024/05/behavior-driven-development-bdd-with-selenium-in-python/</guid>
      <description>&lt;p&gt;This is a continuation from my previous article where we learned the basic of Selenium and how to program it in Python to perform UI automation testing.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://levelup.gitconnected.com/getting-started-on-ui-automation-testing-using-selenium-with-python-b4903dad5a74?source=post_page-----58390fcc0325--------------------------------&#34;&gt;Getting started on UI automation testing using Selenium with Python&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;container alert alert-secondary&#34;&gt;&#xA;    &lt;div&gt;&lt;a href=&#34;https://geraldnguyen.github.io/posts/2023/02/five-minimum-viable-interview-questions-series/&#34; alt=&#34;Five Minimum Viable Interview Questions series — Updated 17 Feb 2023&#34;&gt;&#xA;        &lt;strong&gt;Five Minimum Viable Interview Questions series — Updated 17 Feb 2023&lt;/strong&gt;&#xA;    &lt;/a&gt;&lt;/div&gt;&#xA;    &lt;div class=&#34;d-flex align-items-start&#34;&gt;&#xA;      &#xA;          &#xA;          &#xA;              &#xA;              &lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/02/five-minimum-viable-interview-questions-series/0_qxJpBdXPqAG2Z7NJ_hu18368998056076422812.jpg&#34; alt=&#34;Five Minimum Viable Interview Questions series — Updated 17 Feb 2023&#34; /&gt;&#xA;          &#xA;      &#xA;      &lt;p class=&#34;px-1&#34;&gt;&#xA;        &lt;small&gt;Interviewer: ask them if your interview is running out of time. Interviewee: practice them if your preparation is running out of time.&lt;/small&gt;&#xA;      &lt;/p&gt;</description>
    </item>
    <item>
      <title>How to join video files in a semi-automated way</title>
      <link>https://geraldnguyen.github.io/posts/2024/05/how-to-join-video-semi-automated/</link>
      <pubDate>Sat, 04 May 2024 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2024/05/how-to-join-video-semi-automated/</guid>
      <description>&lt;p&gt;TLDR;&lt;/p&gt;&#xA;&lt;div class=&#34;embed video-player&#34; style=&#34;position:relative;padding-bottom:56.25%;height:0;overflow:hidden;&#34;&gt; &#xA;  &lt;iframe&#xA;    style=&#34;width:100%;height:100%;position:absolute;left:0px;top:0px;overflow:hidden&#34; frameborder=&#34;0&#34; type=&#34;text/html&#34;&#xA;    src=&#34;https://www.dailymotion.com/embed/video/x9264lq?autoplay=0&#34; width=&#34;100%&#34; height=&#34;100%&#34; allowfullscreen&#xA;    title=&#34;Dailymotion Video Player&#34; allow=&#34;autoplay; web-share&#34;&gt; &#xA;  &lt;/iframe&gt; &#xA;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;page-break&#34; role=&#34;separator&#34;&gt;&#xA;  &lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;You will need the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ffmpeg: &lt;a href=&#34;https://ffmpeg.org/&#34;&gt;https://ffmpeg.org/&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Windows command prompt&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Create a script that use ffmpeg to join video files then save the script and grant it necessary execute permission (on Mac and Linux). Make sure ffmpeg is on executable path, usually the &lt;code&gt;$PATH&lt;/code&gt; or &lt;code&gt;%PATH%&lt;/code&gt; variable&lt;/p&gt;&#xA;&lt;p&gt;On Windows, you can use the below.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@echo off&#xA;setlocal enabledelayedexpansion&#xA;&#xA;del concat.txt&#xA;&#xA;rem Get the total number of parameters&#xA;set &amp;#34;totalParams=0&amp;#34;&#xA;for %%# in (%*) do set /a &amp;#34;totalParams += 1&amp;#34;&#xA;&#xA;set /a &amp;#34;to_merge=%totalParams%-1&amp;#34;&#xA;&#xA;echo There are a total of %to_merge% video to merge&#xA;&#xA;rem Loop through all parameters except the last one&#xA;set &amp;#34;index=0&amp;#34;&#xA;set &amp;#34;outputfile=&amp;#34;&#xA;for %%f in (%*) do (&#xA;  set /a &amp;#34;index+=1&amp;#34;&#xA;  if !index! neq %totalParams% (&#xA;    set &amp;#34;F=%%f&amp;#34;&#xA;    set &amp;#34;F=!F:\=/!&amp;#34;&#xA;    set &amp;#34;F=!F:&amp;#34;=!&amp;#34;&#xA;    echo file !F!&#xA;    echo file !F! &amp;gt;&amp;gt; concat.txt&#xA;  ) else ( set &amp;#34;outputfile=%%f&amp;#34; )&#xA;)&#xA;&#xA;echo output file %outputfile%&#xA;&#xA;ffmpeg -safe 0 -f concat -i concat.txt -c copy %outputfile%&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assume the script is named &lt;code&gt;concat.cmd&lt;/code&gt;, use the command &lt;code&gt;concat.cmd &amp;lt;inputfile&amp;gt; &amp;lt;inputfile&amp;gt; &amp;lt;outputfile as the last argument&amp;gt;&lt;/code&gt; to join individual input files to a single output file. For example, to join 2 files &lt;code&gt;video-1.mp4&lt;/code&gt; and &lt;code&gt;video-2.mp4&lt;/code&gt; to a single &lt;code&gt;combine.mp4&lt;/code&gt;, we type the following&lt;/p&gt;</description>
    </item>
    <item>
      <title>Combine EJB and WAR file in a same web service EAR</title>
      <link>https://geraldnguyen.github.io/posts/2010/03/2010-03-02-combine-ejb-war-in-ear/</link>
      <pubDate>Tue, 02 Mar 2010 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2010/03/2010-03-02-combine-ejb-war-in-ear/</guid>
      <description>&lt;p&gt;That has been my challenge since yesterday. And I think I have just got it :D&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s see if I can reconstruct a step-by-step manual:&lt;/p&gt;&#xA;&lt;h3 id=&#34;1-first-of-all-let-have-some-understanding-of-the-structure-of-a-ear-file&#34;&gt;1. First of all, let have some understanding of the structure of a EAR file.&lt;/h3&gt;&#xA;&lt;p&gt;EAR stands for Enterprise ARchive. It&amp;rsquo;s a convenient mean to to pack and deploy components of an enterprise application. Essentially, you can pack WAR, EJB, Resource Adapter and supporting libraries inside a EAR file. Having them all in one place, as a single unit tremendously helps release management and deployment. But it does pose some challenges in the context of class-loading.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
