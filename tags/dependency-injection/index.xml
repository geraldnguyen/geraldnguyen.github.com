<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dependency Injection on Gerald Nguyen</title>
    <link>https://geraldnguyen.github.io/tags/dependency-injection/</link>
    <description>Recent content in Dependency Injection on Gerald Nguyen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 10 Feb 2011 09:19:42 +0100</lastBuildDate>
    <atom:link href="https://geraldnguyen.github.io/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Static vs Singleton Revisited</title>
      <link>https://geraldnguyen.github.io/posts/2011/02/2011-02-14-static-singleton-revisited/</link>
      <pubDate>Thu, 10 Feb 2011 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2011/02/2011-02-14-static-singleton-revisited/</guid>
      <description>&lt;h1 id=&#34;static-vs-singleton-vs-dependency-injection&#34;&gt;Static vs Singleton vs Dependency Injection&lt;/h1&gt;&#xA;&lt;p&gt;Why visited? Because I wrote &lt;a href=&#34;https://geraldnguyen.github.io/posts/2011/01/2011-01-16-static-method-singleton/&#34;&gt;one&lt;/a&gt; before&lt;/p&gt;&#xA;&lt;p&gt;I no longer favor &lt;strong&gt;static&lt;/strong&gt; over &lt;strong&gt;singleton&lt;/strong&gt; as much as before. Static is convenient (sometimes very!), low memory footprint. But it does take away several Object-Orientation (OO) &amp;rsquo;s strength. In addition, it couples your code to a specific implementation class. Singleton is less convenient (sometimes troublesome), slightly higher memory footprint, but it can deliver all OO&amp;rsquo;s strengths that static drops.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static method vs Singleton class</title>
      <link>https://geraldnguyen.github.io/posts/2011/01/2011-01-16-static-method-singleton/</link>
      <pubDate>Sun, 16 Jan 2011 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2011/01/2011-01-16-static-method-singleton/</guid>
      <description>&lt;h1 id=&#34;static-method&#34;&gt;Static method&lt;/h1&gt;&#xA;&lt;p&gt;It really depends. If you hate storing object reference or passing it around, static is a excellent tool.&lt;/p&gt;&#xA;&lt;p&gt;But remember: &lt;code&gt;static&lt;/code&gt; method CANNOT be overridden by sub-classing, it&amp;rsquo;s only hidden. Refer to &lt;a href=&#34;http://faq.javaranch.com/view?OverridingVsHiding&#34;&gt;http://faq.javaranch.com/view?OverridingVsHiding&lt;/a&gt; for a simple explanation. (Side note: invoking a static method on a object reference only brings confusion, it&amp;rsquo;s the variable data type that determine which static method&amp;rsquo;s code will execute - remember: &lt;strong&gt;hidden&lt;/strong&gt;, not overridden).&lt;/p&gt;&#xA;&lt;p&gt;Since static method cannot be overridden, the polymorphism power of OOP is lost, and we fall back to the realm of procedural programming. Some even complain about the difficult of unit testing with static method.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
