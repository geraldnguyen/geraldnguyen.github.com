<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Object Oriented on Gerald Nguyen</title>
    <link>https://geraldnguyen.github.io/tags/object-oriented/</link>
    <description>Recent content in Object Oriented on Gerald Nguyen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Feb 2023 08:00:00 -0700</lastBuildDate>
    <atom:link href="https://geraldnguyen.github.io/tags/object-oriented/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SOLID in Action: the Dependency Inversion Principle</title>
      <link>https://geraldnguyen.github.io/posts/2023/02/solid-dependency-inversion-principle/</link>
      <pubDate>Tue, 21 Feb 2023 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/02/solid-dependency-inversion-principle/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/02/solid-dependency-inversion-principle/0_Uv2de6h1frX8mT2N.jpg&#34;&#xA;    alt=&#34;Photo by ocd studio on Unsplash&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@ocd_studio?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;ocd studio&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h1 id=&#34;the-dependency-inversion-principle-dip&#34;&gt;The Dependency Inversion Principle (DIP)&lt;/h1&gt;&#xA;&lt;p&gt;Naive application of traditional software development methods (e.g. &lt;a href=&#34;https://en.wikipedia.org/wiki/SADT&#34;&gt;&lt;strong&gt;SADT&lt;/strong&gt;&lt;/a&gt; or Structured Analysis and Design Technique), in the past, often resulted in a type of relationship where high-level modules depended on lower implementation details. This form of relationship often leads to &lt;a href=&#34;https://web.archive.org/web/20110714224327/http://www.objectmentor.com/resources/articles/dip.pdf&#34;&gt;rigidity, fragility, and immobility&lt;/a&gt;. These are the symptoms of bad design according to &lt;a href=&#34;https://en.wikipedia.org/wiki/Robert_C._Martin&#34;&gt;Robert C. Martin&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/02/solid-dependency-inversion-principle/1_RVjxPenHUcH9qZ_AuwwvNQ.png&#34;&#xA;    alt=&#34;A naive application of top-down approaches can lead to bad design. Source: R.C.M paper&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;A naive application of top-down approaches can lead to bad design. Source: &lt;a href=&#34;https://web.archive.org/web/20110714224327/http://www.objectmentor.com/resources/articles/dip.pdf&#34;&gt;R.C.M paper&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>SOLID in Action: the Interface Segregation Principle</title>
      <link>https://geraldnguyen.github.io/posts/2023/01/solid-interface-segregation-principle/</link>
      <pubDate>Fri, 27 Jan 2023 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/01/solid-interface-segregation-principle/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/01/solid-interface-segregation-principle/0_2JS1H36QRQHFriO0.jpg&#34;&#xA;    alt=&#34;Photos by Eugen Str on Unsplash&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Photos by &lt;a href=&#34;https://unsplash.com/@eugen1980?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Eugen Str&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/01/solid-interface-segregation-principle/0_MRP8w8sESbbxCOzU.jpg&#34;&#xA;    alt=&#34;Photos by Patrick on Unsplash&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Photos by &lt;a href=&#34;https://unsplash.com/@pf91_photography?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Patrick&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;If you are going to build a house, a table, or a chair, what is your preferred option? The multiple tools on the first picture or one Swiss knife on the second?&lt;/p&gt;&#xA;&lt;p&gt;Yep, you are right. If you want to create something useful that last for years, you need specialized tools. The same thinking applies to software development, if you want to create a serious application, you need specialized components represented by their own, purposely designed interfaces. The Interface Segregation Principle (ISP) is available to guide the creation of those interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SOLID in Action — the Liskov Substitution Principle</title>
      <link>https://geraldnguyen.github.io/posts/2023/01/solid-liskov-substitution-principle/</link>
      <pubDate>Mon, 09 Jan 2023 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2023/01/solid-liskov-substitution-principle/</guid>
      <description>&lt;p&gt;Let us start with a question:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Can social media connections &lt;em&gt;substitute&lt;/em&gt; for real life friends and family?&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Well, it depends on how we define &amp;ldquo;connection&amp;rdquo;. If we have it as below, then according to the Liskow Substitution Principle (LSP), the answer is No.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2023/01/solid-liskov-substitution-principle/1_IuKgDzlyhAKEuql9Yr7qGw.png&#34;&#xA;    alt=&#34;Connection classes&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Connection classes&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;Before we go further into this example, let’s back it up a bit to study the official definition of LSP.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;There is some math but I promise to keep it brief&lt;/p&gt;</description>
    </item>
    <item>
      <title>SOLID in Action — the Open-closed Principle</title>
      <link>https://geraldnguyen.github.io/posts/2022/12/solid-open-close-principle/</link>
      <pubDate>Sat, 24 Dec 2022 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/12/solid-open-close-principle/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2022/12/solid-open-close-principle/0_eqhYFU2kNfQ0TrN9.jpg&#34;&#xA;    alt=&#34;Photo by Richard Balog on Unsplash&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@ricsard?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Richard Balog&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;In the physical world, a door closed is a closed door. In the software world, a closed entity may still be open for extension. And it should be so, according to the Open-closed principle (OCP).&lt;/p&gt;&#xA;&lt;p&gt;There are 2 popular ways to apply this principle. We are going to discuss them both.&lt;/p&gt;&#xA;&lt;p&gt;And a third option.&lt;/p&gt;&#xA;&lt;h1 id=&#34;1--inheritance&#34;&gt;#1 — Inheritance&lt;/h1&gt;&#xA;&lt;p&gt;This is the original application of OCP. &lt;a href=&#34;https://en.wikipedia.org/wiki/Bertrand_Meyer&#34;&gt;Bertrand Meyer&lt;/a&gt;, who introduced the term in his 1988 book &lt;em&gt;Object-Oriented Software Construction&lt;/em&gt;, intended that:&lt;/p&gt;</description>
    </item>
    <item>
      <title>SOLID in Action — the Single Responsibility Principle</title>
      <link>https://geraldnguyen.github.io/posts/2022/12/solid-single-responsibility-principle/</link>
      <pubDate>Wed, 14 Dec 2022 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/12/solid-single-responsibility-principle/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2022/12/solid-single-responsibility-principle/0_AzgjytmEOFKBuWDZ.jpg&#34;&#xA;    alt=&#34;Photo by Robert Linder on Unsplash&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@rwlinder?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Robert Linder&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=medium&amp;amp;utm_medium=referral&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;We know the saying “Jack of all trades, master of none”. We dislike it when we are at the receiving end. We dislike it too when it is said to someone we love. That should extend to &lt;em&gt;things&lt;/em&gt; that we love too.&lt;/p&gt;&#xA;&lt;p&gt;We developers love the codes we created. We are proud of the function we write, the class we design, the component, the system, and the microservices… we develop. We thus would not like it if they become “Jack of all trades, master of none”.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Becoming a SOLID developer</title>
      <link>https://geraldnguyen.github.io/posts/2022/12/becoming-a-solid-developer/</link>
      <pubDate>Wed, 07 Dec 2022 08:00:00 -0700</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2022/12/becoming-a-solid-developer/</guid>
      <description>&lt;p&gt;Being called &lt;em&gt;solid&lt;/em&gt; is a compliment. The word carries the positive notions of reliability and respectability. All of us should aim to become one.&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://geraldnguyen.github.io/posts/2022/12/becoming-a-solid-developer/1_jgPZbah9dkZgepyo6D2xwQ.webp&#34;&#xA;    alt=&#34;https://www.collinsdictionary.com/dictionary/english/solid (screenshot)&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;&lt;a href=&#34;https://www.collinsdictionary.com/dictionary/english/solid&#34;&gt;https://www.collinsdictionary.com/dictionary/english/solid&lt;/a&gt; (screenshot)&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;If you are a software engineer or want to become one, you are in luck because there is a set of SOLID principles to guide your way.&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;page-break&#34; role=&#34;separator&#34;&gt;&#xA;  &lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&lt;span class=&#34;dot&#34;&gt;&lt;/span&gt;&#xA;&lt;/div&gt;&#xA;&lt;p&gt;SOLID is an acronym in the software engineering profession. It stands for:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;ingle Responsibility principle&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;O&lt;/strong&gt;pen-closed principle&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;iskov Substitution principle&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt;nterface segregation principle&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt;ependency inversion principle&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The term was coined by &lt;a href=&#34;https://michaelfeathers.silvrback.com/&#34;&gt;Michael Feather&lt;/a&gt; around 2004 for the 5 object-oriented design principles first collected by &lt;a href=&#34;http://cleancoder.com/products&#34;&gt;Uncle Bob&lt;/a&gt; in his 2000 paper &lt;a href=&#34;https://web.archive.org/web/20150906155800/http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf&#34;&gt;Design Principles and Design Patterns&lt;/a&gt; and his other &lt;a href=&#34;http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&#34;&gt;articles&lt;/a&gt; and &lt;a href=&#34;https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/&#34;&gt;books&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
