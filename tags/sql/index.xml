<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sql on Gerald Nguyen</title>
    <link>https://geraldnguyen.github.io/tags/sql/</link>
    <description>Recent content in Sql on Gerald Nguyen</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Jun 2013 09:19:42 +0100</lastBuildDate>
    <atom:link href="https://geraldnguyen.github.io/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Database] Exists or Inner Join: Duplicate Records</title>
      <link>https://geraldnguyen.github.io/posts/2013/06/2013-06-16-database-exist-or-inner-join-duplicate-transactions/</link>
      <pubDate>Sun, 16 Jun 2013 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2013/06/2013-06-16-database-exist-or-inner-join-duplicate-transactions/</guid>
      <description>&lt;h2 id=&#34;inner-join-vs-exists&#34;&gt;INNER JOIN vs. EXISTS&lt;/h2&gt;&#xA;&lt;p&gt;Often, EXISTS and INNER JOIN can be used interchangeably to query data with existence in 2 or more tables. However, it is not always the case. There is an important inherent characteristics of INNER JOIN that every developer should keep in mind: INNER JOIN result may contain DUPLICATE data record. This is important for uniqueness-sensitive handling of query result (e.g. record count), or when migrating database table with unique constraints.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Which Form of String Comparison Is Supported</title>
      <link>https://geraldnguyen.github.io/posts/2013/05/2013-05-21-which-form-of-string-comparison-is-supported/</link>
      <pubDate>Tue, 21 May 2013 09:19:42 +0100</pubDate>
      <guid>https://geraldnguyen.github.io/posts/2013/05/2013-05-21-which-form-of-string-comparison-is-supported/</guid>
      <description>&lt;p&gt;Below example is for Oracle DB, but adopting for other DBMS e.g. Sybase, MS SQL… should be straightforward.&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select ‘both no space’ as “String comparison in Oracle” from dual where ‘a’ = ‘a’&#xA;--&#xA;union&#xA;select ‘right has single trailing space’ from dual where ‘a’ = ‘a ‘&#xA;union&#xA;select ‘right has multiple trailing space’ from dual where ‘a’ = ‘a   ‘&#xA;union&#xA;select ‘right has single leading space’ from dual where ‘a’ = ‘ a’&#xA;union&#xA;select ‘right has multiple leading space’ from dual where ‘a’ = ‘    a’&#xA;--&#xA;union&#xA;select ‘left has single trailing space’ from dual where ‘a ‘ = ‘a’&#xA;union&#xA;select ‘left has multiple trailing space’ from dual where ‘a   ‘ = ‘a’&#xA;union&#xA;select ‘left has single leading space’ from dual where ‘ a’ = ‘a’&#xA;union&#xA;select ‘left has multiple leading space’ from dual where ‘    a’ = ‘a’&#xA;--&#xA;union&#xA;select ‘right has single leading and trailing space’ from dual where ‘a’ = ‘ a ‘&#xA;union&#xA;select ‘right has multiple leading and trailing space’ from dual where ‘a’ = ‘    a   ‘&#xA;union&#xA;select ‘left has single leading and trailing space’ from dual where ‘ a ‘ = ‘a’&#xA;union&#xA;select ‘left has multiple leading and trailing space’ from dual where ‘   a      ‘ = ‘a’&#xA;—-&#xA;union&#xA;select ‘both has leading and trailing space but leading space are different’ from dual where ‘ a ‘ = ‘  a ‘&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
  </channel>
</rss>
