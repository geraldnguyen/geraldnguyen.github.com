<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on</title><link>/blog/</link><description>Recent content in Blog on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 08 Sep 2021 09:19:42 +0100</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Work-hard Mocking or Work-smart Mocking</title><link>/blog/work-hard-mocking-or-work-smart-mocking/</link><pubDate>Wed, 08 Sep 2021 09:19:42 +0100</pubDate><guid>/blog/work-hard-mocking-or-work-smart-mocking/</guid><description>To be honest, I prefer strict mocking over relaxed mocking + verify. That is, if my mocking becomes neccessary (because of strict mocking), it also functions as a verify. I can save a few chunks of codes by sacrifying a little explicitness and sometimes verbosity of verify and ArgumentCaptor setup.
Here&amp;rsquo;s a sample
Assuming we want to test method createSampleEntity from service SampleService, there are 3 things we want to verify: i) sampleRepository.</description></item><item><title>Java Try-with-resource</title><link>/blog/java-try-with-resource/</link><pubDate>Fri, 03 Sep 2021 09:19:42 +0100</pubDate><guid>/blog/java-try-with-resource/</guid><description>Overview If my memory serves, I used to do such boring lengthly track-and-close A LOT!
public void executeQuery(String sql) throws SQLException { Connection conn; PreparedStatement stmt; try { conn = getConnection(); stmt = conn.prepareStatement(sql); stmt.executeQuery(); } finally { if (stmt != null) { stmt.close(); } if (conn != null) { conn.close(); } } } The above can be just as short as below
public void executeQuery(String sql) throws SQLException { try ( Connection conn = getConnection(); PreparedStatement stmt = conn.</description></item><item><title>Kubernetes Memory Units</title><link>/blog/kubernetes-memory-units/</link><pubDate>Sun, 13 Sep 2020 09:19:42 +0100</pubDate><guid>/blog/kubernetes-memory-units/</guid><description>Default memory unit in Kubernetes is bytes, in addition to other shorter forms with one of supported suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki.
For example: 128974848, 129e6, 129M , 123Mi
Have you ever wondered what do those suffixes mean?
A popular reference is https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-memory-6b41e9a955f9
But the root definition is at https://en.wikipedia.org/wiki/Binary_prefix
Prefixes for multiples of bits (bit) or bytes (B) Decimal Value SI 1000 103 k kilo 10002 106 M mega 10003 109 G giga 10004 1012 T tera 10005 1015 P peta 10006 1018 E exa 10007 1021 Z zetta 10008 1024 Y yotta Binary Value IEC JEDEC 1024 210 Ki kibi K kilo 10242 220 Mi mebi M mega 10243 230 Gi gibi G giga 10244 240 Ti tebi – 10245 250 Pi pebi – 10246 260 Ei exbi – 10247 270 Zi zebi – 10248 280 Yi yobi –</description></item><item><title>javax.transaction.Transactional vs org.springframework.transaction.annotation.Transactional</title><link>/blog/javax.transaction.transactional-vs-org.springframework.transaction.annotation.transactional/</link><pubDate>Thu, 10 Sep 2020 09:19:42 +0100</pubDate><guid>/blog/javax.transaction.transactional-vs-org.springframework.transaction.annotation.transactional/</guid><description>If you’re using Spring or Spring Boot, then use the Spring @Transactional annotation, as it allows you to configure more attributes than the Java EE @Transactional annotation.
If you are using Java EE alone, and you deploy your application on a Java EE application server, then use the Java EE @Transactional annotation.
https://stackoverflow.com/a/62702146/575457</description></item><item><title>The best way to fix the Hibernate MultipleBagFetchException</title><link>/blog/the-best-way-to-fix-the-hibernate-multiplebagfetchexception/</link><pubDate>Thu, 10 Sep 2020 09:19:42 +0100</pubDate><guid>/blog/the-best-way-to-fix-the-hibernate-multiplebagfetchexception/</guid><description>First: How NOT to “fix”: Using Set instead of List See the original article
Recommended fix: Instead of executing a single JPQL query that fetches two associations, we can execute two JPQL queries instead List&amp;lt;Post&amp;gt; posts = doInJPA(entityManager -&amp;gt; { List&amp;lt;Post&amp;gt; _posts = entityManager .createQuery( &amp;quot;select distinct p &amp;quot; + &amp;quot;from Post p &amp;quot; + &amp;quot;left join fetch p.comments &amp;quot; + &amp;quot;where p.id between :minId and :maxId &amp;quot;, Post.class) .setParameter(&amp;quot;minId&amp;quot;, 1L) .</description></item><item><title>Using Bootstrap with React</title><link>/blog/using-bootstrap-with-react/</link><pubDate>Mon, 20 Apr 2020 09:19:42 +0100</pubDate><guid>/blog/using-bootstrap-with-react/</guid><description>Mixing browser and React Insert links to Bootstrap&amp;rsquo;s javascript and CSS and its dependencies in app&amp;rsquo;s index.html
&amp;lt;head&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;!-- other content --&amp;gt; &amp;lt;script src=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js&amp;quot; integrity=&amp;quot;sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.slim.min.js&amp;quot; integrity=&amp;quot;sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js&amp;quot; integrity=&amp;quot;sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; Invoke appropriate method via window.$ jQuery object
window.$('#about-modal').modal() Pure React way Install Bootstrap as a NPM module
npm install bootstrap --save npm install jquery popper.js --save Load bootstrap CSS and Javascript in React app&amp;rsquo;s entry point (e.</description></item><item><title>[Database] Exists or Inner Join: Duplicate Records</title><link>/blog/database-exists-or-inner-join-duplicate-records/</link><pubDate>Sun, 16 Jun 2013 09:19:42 +0100</pubDate><guid>/blog/database-exists-or-inner-join-duplicate-records/</guid><description>INNER JOIN vs. EXISTS Often, EXISTS and INNER JOIN can be used interchangeably to query data with existence in 2 or more tables. However, it is not always the case. There is an important inherent characteristics of INNER JOIN that every developer should keep in mind: INNER JOIN result may contain DUPLICATE data record. This is important for uniqueness-sensitive handling of query result (e.g. record count), or when migrating database table with unique constraints.</description></item><item><title>Which Form of String Comparison Is Supported</title><link>/blog/which-form-of-string-comparison-is-supported/</link><pubDate>Tue, 21 May 2013 09:19:42 +0100</pubDate><guid>/blog/which-form-of-string-comparison-is-supported/</guid><description>Below example is for Oracle DB, but adopting for other DBMS e.g. Sybase, MS SQL… should be straightforward.
select ‘both no space’ as “String comparison in Oracle” from dual where ‘a’ = ‘a’ -- union select ‘right has single trailing space’ from dual where ‘a’ = ‘a ‘ union select ‘right has multiple trailing space’ from dual where ‘a’ = ‘a ‘ union select ‘right has single leading space’ from dual where ‘a’ = ‘ a’ union select ‘right has multiple leading space’ from dual where ‘a’ = ‘ a’ -- union select ‘left has single trailing space’ from dual where ‘a ‘ = ‘a’ union select ‘left has multiple trailing space’ from dual where ‘a ‘ = ‘a’ union select ‘left has single leading space’ from dual where ‘ a’ = ‘a’ union select ‘left has multiple leading space’ from dual where ‘ a’ = ‘a’ -- union select ‘right has single leading and trailing space’ from dual where ‘a’ = ‘ a ‘ union select ‘right has multiple leading and trailing space’ from dual where ‘a’ = ‘ a ‘ union select ‘left has single leading and trailing space’ from dual where ‘ a ‘ = ‘a’ union select ‘left has multiple leading and trailing space’ from dual where ‘ a ‘ = ‘a’ —- union select ‘both has leading and trailing space but leading space are different’ from dual where ‘ a ‘ = ‘ a ‘</description></item><item><title>Myths of Secure Web Browsing</title><link>/blog/myths-of-secure-web-browsing/</link><pubDate>Sat, 18 May 2013 09:19:42 +0100</pubDate><guid>/blog/myths-of-secure-web-browsing/</guid><description>1. I am safe because I never visited porn website
Wrong. Nowadays, many more malware infection are linked to visit to legitimate and popular websites than porn or counterfeit sites.
According to Cisco 2013 Annual Security Report, Business/Industry site category stands at 3rd position behind advertising and dynamic content categories in the top 20 dangerous website categories. Included are Shopping (8th), Travel (9th), News (13th). Porn or counterfeit products (e.g. cheap Viagra) didn’t make it to top 20.</description></item><item><title>JSR 303 – Bean Validation – Let Your Bean Validate Itself</title><link>/blog/jsr-303-bean-validation-let-your-bean-validate-itself/</link><pubDate>Thu, 20 Dec 2012 09:19:42 +0100</pubDate><guid>/blog/jsr-303-bean-validation-let-your-bean-validate-itself/</guid><description>This is a simple application of my previous post whereby you can develop your own validation rule and enforcer.
The significance of this application is the use of SelfValidate interface to enable bean to define its own validation method and validator to invoke bean’s method. Typically this constraint is apply to a type, but application on field is also possible.
Constraint Annotation @Target({ElementType.TYPE}) @Retention(RetentionPolicy.RUNTIME) @Constraint(validatedBy=SelfValidator.class) public @interface SelfValidation { String message() default &amp;quot;Self-validation failed&amp;quot;; Class[] groups() default {}; Class&amp;lt;?</description></item></channel></rss>