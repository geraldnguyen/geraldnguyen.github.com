<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on</title><link>/blog/</link><description>Recent content in Blog on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 19 Oct 2021 09:19:42 +0100</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring REST API Interview Questions</title><link>/blog/spring-rest-api-interview-questions/</link><pubDate>Tue, 19 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/spring-rest-api-interview-questions/</guid><description>Fill in the blank Objective: Assess candidate&amp;rsquo;s practical experience and knowledge
Instructions: Given the below controller, fill in Spring annotations according to instruction given in javadocs
Worth paying attention:
Did the candidate notice the repetion of /friends prefix and opt to use a @RequestMapping(/friends) on the controller class How did he/she annotate the optional parameter name and id in findFriends method? What annotation can be used to force a 204 (no content) response?</description></item><item><title>Enable Comment</title><link>/blog/enable-comment/</link><pubDate>Sun, 17 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/enable-comment/</guid><description>Introduction You may have noticed that this website is using a powerful-yet-easy-to-use doks theme.
As I wanted to have more interaction with my readers, enabling comment is a first step.
Enable Comment in Hugo Hugo provides built-in support for Disqus. It ships with a _internal/disqus.html template that we can simply copy &amp;amp; paste to wherever we want comment to appear. The steps are simple:
Sign up for a Disqus account, creating a Disqus site Configure Disqus' site&amp;rsquo;s shortname in Hugo site configuration.</description></item><item><title>Java Method Reference</title><link>/blog/java-method-reference/</link><pubDate>Tue, 12 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/java-method-reference/</guid><description>Introduction Method reference lets you use an existing method as a lambda as long as their signature (input &amp;amp; output) are compatible.
I first know method reference from C#, so its Java concept is familiar to me. Or that&amp;rsquo;s what I thought until I picked up Modern Java Recipes book.
Here, we&amp;rsquo;ll explore more about the 3 forms of method references in Java
object::instanceMethod Class::staticMethod Class::instanceMethod The last one is special, as we shall see</description></item><item><title>Code Review as an interview tool</title><link>/blog/code-review-as-an-interview-tool/</link><pubDate>Fri, 01 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/code-review-as-an-interview-tool/</guid><description>In my team, we value and encourage every one to participate in code review. We consider it an important part in our Engineering Excellence guideline as a way of learning and contributing:
When you review other people codes, you help them and the team uncovered requirement/design/coding issues before they get into main codebase and eventually production. You also assure a consistent practice and coding standard are followed across all team members.</description></item><item><title>Work-hard Mocking or Work-smart Mocking</title><link>/blog/work-hard-mocking-or-work-smart-mocking/</link><pubDate>Wed, 08 Sep 2021 09:19:42 +0100</pubDate><guid>/blog/work-hard-mocking-or-work-smart-mocking/</guid><description>To be honest, I prefer strict mocking over relaxed mocking + verify. That is, if my mocking becomes neccessary (because of strict mocking), it also functions as a verify. I can save a few chunks of codes by sacrifying a little explicitness and sometimes verbosity of verify and ArgumentCaptor setup.
Here&amp;rsquo;s a sample
Assuming we want to test method createSampleEntity from service SampleService, there are 3 things we want to verify: i) sampleRepository.</description></item><item><title>Java Try-with-resource</title><link>/blog/java-try-with-resource/</link><pubDate>Fri, 03 Sep 2021 09:19:42 +0100</pubDate><guid>/blog/java-try-with-resource/</guid><description>Overview If my memory serves, I used to do such boring lengthly track-and-close A LOT!
public void executeQuery(String sql) throws SQLException { Connection conn; PreparedStatement stmt; try { conn = getConnection(); stmt = conn.prepareStatement(sql); stmt.executeQuery(); } finally { if (stmt != null) { stmt.close(); } if (conn != null) { conn.close(); } } } The above can be just as short as below
public void executeQuery(String sql) throws SQLException { try ( Connection conn = getConnection(); PreparedStatement stmt = conn.</description></item><item><title>Kubernetes Memory Units</title><link>/blog/kubernetes-memory-units/</link><pubDate>Sun, 13 Sep 2020 09:19:42 +0100</pubDate><guid>/blog/kubernetes-memory-units/</guid><description>Default memory unit in Kubernetes is bytes, in addition to other shorter forms with one of supported suffixes: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki.
For example: 128974848, 129e6, 129M , 123Mi
Have you ever wondered what do those suffixes mean?
A popular reference is https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-memory-6b41e9a955f9
But the root definition is at https://en.wikipedia.org/wiki/Binary_prefix
Prefixes for multiples of bits (bit) or bytes (B) Decimal Value SI 1000 103 k kilo 10002 106 M mega 10003 109 G giga 10004 1012 T tera 10005 1015 P peta 10006 1018 E exa 10007 1021 Z zetta 10008 1024 Y yotta Binary Value IEC JEDEC 1024 210 Ki kibi K kilo 10242 220 Mi mebi M mega 10243 230 Gi gibi G giga 10244 240 Ti tebi – 10245 250 Pi pebi – 10246 260 Ei exbi – 10247 270 Zi zebi – 10248 280 Yi yobi –</description></item><item><title>javax.transaction.Transactional vs org.springframework.transaction.annotation.Transactional</title><link>/blog/javax.transaction.transactional-vs-org.springframework.transaction.annotation.transactional/</link><pubDate>Thu, 10 Sep 2020 09:19:42 +0100</pubDate><guid>/blog/javax.transaction.transactional-vs-org.springframework.transaction.annotation.transactional/</guid><description>If you’re using Spring or Spring Boot, then use the Spring @Transactional annotation, as it allows you to configure more attributes than the Java EE @Transactional annotation.
If you are using Java EE alone, and you deploy your application on a Java EE application server, then use the Java EE @Transactional annotation.
https://stackoverflow.com/a/62702146/575457</description></item><item><title>The best way to fix the Hibernate MultipleBagFetchException</title><link>/blog/the-best-way-to-fix-the-hibernate-multiplebagfetchexception/</link><pubDate>Thu, 10 Sep 2020 09:19:42 +0100</pubDate><guid>/blog/the-best-way-to-fix-the-hibernate-multiplebagfetchexception/</guid><description>First: How NOT to “fix”: Using Set instead of List See the original article
Recommended fix: Instead of executing a single JPQL query that fetches two associations, we can execute two JPQL queries instead List&amp;lt;Post&amp;gt; posts = doInJPA(entityManager -&amp;gt; { List&amp;lt;Post&amp;gt; _posts = entityManager .createQuery( &amp;quot;select distinct p &amp;quot; + &amp;quot;from Post p &amp;quot; + &amp;quot;left join fetch p.comments &amp;quot; + &amp;quot;where p.id between :minId and :maxId &amp;quot;, Post.class) .setParameter(&amp;quot;minId&amp;quot;, 1L) .</description></item><item><title>Using Bootstrap with React</title><link>/blog/using-bootstrap-with-react/</link><pubDate>Mon, 20 Apr 2020 09:19:42 +0100</pubDate><guid>/blog/using-bootstrap-with-react/</guid><description>Mixing browser and React Insert links to Bootstrap&amp;rsquo;s javascript and CSS and its dependencies in app&amp;rsquo;s index.html
&amp;lt;head&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;!-- other content --&amp;gt; &amp;lt;script src=&amp;quot;https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js&amp;quot; integrity=&amp;quot;sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.4.1.slim.min.js&amp;quot; integrity=&amp;quot;sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js&amp;quot; integrity=&amp;quot;sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; Invoke appropriate method via window.$ jQuery object
window.$('#about-modal').modal() Pure React way Install Bootstrap as a NPM module
npm install bootstrap --save npm install jquery popper.js --save Load bootstrap CSS and Javascript in React app&amp;rsquo;s entry point (e.</description></item></channel></rss>