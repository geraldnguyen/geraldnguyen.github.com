<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on</title><link>/blog/</link><description>Recent content in Blog on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 19 Jan 2022 09:19:42 +0100</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>What are APIs?</title><link>/blog/what-are-apis/</link><pubDate>Wed, 19 Jan 2022 09:19:42 +0100</pubDate><guid>/blog/what-are-apis/</guid><description>Are API the waiters? No - The waiters are part of Frontend. They are responsible for creating the nice visual and interactive experience such as greeting customers, arranging the tables, present the dishes - like what React or Angular codes do.
They will take your orders - like how HTML forms accept your inputs, auto-complete your sentences, or apologize that certain dishes aren&amp;rsquo;t available.
And they send your orders to the kitchen.</description></item><item><title>Simple Code - Effective UI - Month Picker</title><link>/blog/simple-code-effective-ui-month-picker/</link><pubDate>Mon, 27 Dec 2021 09:19:42 +0100</pubDate><guid>/blog/simple-code-effective-ui-month-picker/</guid><description>Say you want to obtain a specific month within a year, what&amp;rsquo;s the most effective UI to do so?
Option 1: separate Month and Year dropdowns Sample January February March April May June July August September October November December Month 2021 2022 2023 Year Codes &amp;lt;select&amp;gt; &amp;lt;option&amp;gt;January&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;February&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;March&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;April&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;May&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;June&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;July&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;August&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;September&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;October&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;November&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;December&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; Month &amp;lt;select&amp;gt; &amp;lt;option&amp;gt;2021&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;2022&amp;lt;/option&amp;gt; &amp;lt;option&amp;gt;2023&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; Year Discussion It may be verbose, but you have total control over their placements, label and format</description></item><item><title>Java Stream Interview Tests - takeWhile</title><link>/blog/java-stream-interview-tests-takewhile/</link><pubDate>Mon, 01 Nov 2021 09:19:42 +0100</pubDate><guid>/blog/java-stream-interview-tests-takewhile/</guid><description>Requirement Re-implement takeWhile(Predicate) method
Discussion takeWhile(Predicate) (and dropWhile(...)) is a stateful intermediate method. The maintenance of state is necessary to implement such operation
takeWhile is essentially a filtering mechanism where elements are accepted so long as the predicate is still true. Once the predicate resulting in false, all subsequence elements are dropped from the stream. A stateful variable is necessary to record the change of state trigger by that event.</description></item><item><title>Java Stream Interview Tests - Distinct Characters</title><link>/blog/java-stream-interview-tests-distinct-characters/</link><pubDate>Sat, 30 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/java-stream-interview-tests-distinct-characters/</guid><description>Requirement Given a sentence comprising of one or multiple words separated by space, return a sorted list of distinct characters excluding space
Solve this problem using Java Stream
Hint: Use String.charAt(0) to convert a single-char string to char
Discussion This problem tests candidate&amp;rsquo;s knowledge of the following Stream methods:
Stream.of(...) or Array.stream(...) to convert an array of single-char string (e.g. from str.split(&amp;quot;&amp;quot;)) to Stream&amp;lt;String&amp;gt; map(str -&amp;gt; str.charAt(0)) (Note: while String.</description></item><item><title>Spring REST API Interview Questions</title><link>/blog/spring-rest-api-interview-questions/</link><pubDate>Tue, 19 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/spring-rest-api-interview-questions/</guid><description>Fill in the blank Objective: Assess candidate&amp;rsquo;s practical experience and knowledge
Instructions: Given the below controller, fill in Spring annotations according to instruction given in javadocs
Worth paying attention:
Did the candidate notice the repetion of /friends prefix and opt to use a @RequestMapping(/friends) on the controller class How did he/she annotate the optional parameter name and id in findFriends method? What annotation can be used to force a 204 (no content) response?</description></item><item><title>Enable Comment in Hugo site</title><link>/blog/enable-comment-in-hugo-site/</link><pubDate>Sun, 17 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/enable-comment-in-hugo-site/</guid><description>Introduction You may have noticed that this website is using a powerful-yet-easy-to-use doks theme.
As I wanted to have more interaction with my readers, enabling comment is a first step.
Enable Comment in Hugo Hugo provides built-in support for Disqus. It ships with a _internal/disqus.html template that we can simply copy &amp;amp; paste to wherever we want comment to appear. The steps are simple:
Sign up for a Disqus account, creating a Disqus site Configure Disqus' site&amp;rsquo;s shortname in Hugo site configuration.</description></item><item><title>Java Method Reference</title><link>/blog/java-method-reference/</link><pubDate>Tue, 12 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/java-method-reference/</guid><description>Introduction Method reference lets you use an existing method as a lambda as long as their signature (input &amp;amp; output) are compatible.
I first know method reference from C#, so its Java concept is familiar to me. Or that&amp;rsquo;s what I thought until I picked up Modern Java Recipes book.
Here, we&amp;rsquo;ll explore more about the 3 forms of method references in Java
object::instanceMethod Class::staticMethod Class::instanceMethod The last one is special, as we shall see</description></item><item><title>Code Review as an interview tool</title><link>/blog/code-review-as-an-interview-tool/</link><pubDate>Fri, 01 Oct 2021 09:19:42 +0100</pubDate><guid>/blog/code-review-as-an-interview-tool/</guid><description>In all software development teams that I have been part of, we always value and encourage every one to participate in code review. We consider it an important part in our Engineering Excellence guideline as a way of learning and contributing:
When you review other people codes, you help them and the team uncovered requirement/design/coding issues before they get into main codebase and eventually production. You also assure a consistent practice and coding standard are followed across all team members.</description></item><item><title>Work-hard Mocking or Work-smart Mocking</title><link>/blog/work-hard-mocking-or-work-smart-mocking/</link><pubDate>Wed, 08 Sep 2021 09:19:42 +0100</pubDate><guid>/blog/work-hard-mocking-or-work-smart-mocking/</guid><description>To be honest, I prefer strict mocking over relaxed mocking + verify. That is, if my mocking becomes neccessary (because of strict mocking), it also functions as a verify. I can save a few chunks of codes by sacrifying a little explicitness and sometimes verbosity of verify and ArgumentCaptor setup.
Here&amp;rsquo;s a sample
Assuming we want to test method createSampleEntity from service SampleService, there are 3 things we want to verify: i) sampleRepository.</description></item><item><title>Java Try-with-resource</title><link>/blog/java-try-with-resource/</link><pubDate>Fri, 03 Sep 2021 09:19:42 +0100</pubDate><guid>/blog/java-try-with-resource/</guid><description>Overview If my memory serves, I used to do such boring lengthly track-and-close A LOT!
public void executeQuery(String sql) throws SQLException { Connection conn; PreparedStatement stmt; try { conn = getConnection(); stmt = conn.prepareStatement(sql); stmt.executeQuery(); } finally { if (stmt != null) { stmt.close(); } if (conn != null) { conn.close(); } } } The above can be just as short as below
public void executeQuery(String sql) throws SQLException { try ( Connection conn = getConnection(); PreparedStatement stmt = conn.</description></item></channel></rss>